{"version":3,"sources":["LocalSvg.tsx"],"names":["NativeModules","RNSVGRenderableManager","getRawResource","getUriFromSource","source","resolvedAssetSource","uri","loadLocalRawResourceDefault","isUriAnAndroidResourceIdentifier","indexOf","loadAndroidRawResource","console","error","loadLocalRawResourceAndroid","loadLocalRawResource","Platform","OS","LocalSvg","props","asset","rest","xml","setXml","then","WithLocalSvg","load","prevProps","setState","state","Component"],"mappings":"+iDAAA,qDACA,yCAEA,2GAEA,0BACA,0B,2zDAEA,SAA2BA,2BAAcC,sBAAd,EAAwC,EAAnE,CAAQC,cAAR,MAAQA,cAAR,CAEO,QAASC,CAAAA,gBAAT,CAA0BC,MAA1B,CAAoD,CACzD,GAAMC,CAAAA,mBAAmB,CAAG,gCAAmBD,MAAnB,CAA5B,CACA,MAAOC,CAAAA,mBAAmB,CAACC,GAA3B,CACD,CAEM,QAASC,CAAAA,2BAAT,CAAqCH,MAArC,CAA+D,CACpE,GAAME,CAAAA,GAAG,CAAGH,gBAAgB,CAACC,MAAD,CAA5B,CACA,MAAO,mBAAUE,GAAV,CAAP,CACD,CAEM,QAASE,CAAAA,gCAAT,CAA0CF,GAA1C,CAAiE,CACtE,MAAO,OAAOA,CAAAA,GAAP,GAAe,QAAf,EAA2BA,GAAG,CAACG,OAAJ,CAAY,GAAZ,GAAoB,CAAC,CAAvD,CACD,CAEM,QAAeC,CAAAA,sBAAf,CAAsCJ,GAAtC,qMAEUJ,cAAc,CAACI,GAAD,CAFxB,gHAIHK,OAAO,CAACC,KAAR,CACE,mFADF,cAJG,gCAQI,IARJ,2EAYA,QAASC,CAAAA,2BAAT,CAAqCT,MAArC,CAA+D,CACpE,GAAME,CAAAA,GAAG,CAAGH,gBAAgB,CAACC,MAAD,CAA5B,CACA,GAAII,gCAAgC,CAACF,GAAD,CAApC,CAA2C,CACzC,MAAOI,CAAAA,sBAAsB,CAACJ,GAAD,CAA7B,CACD,CAFD,IAEO,CACL,MAAO,mBAAUA,GAAV,CAAP,CACD,CACF,CAEM,GAAMQ,CAAAA,oBAAoB,CAC/BC,sBAASC,EAAT,GAAgB,SAAhB,CACIT,2BADJ,CAEIM,2BAHC,C,kDAQA,QAASI,CAAAA,QAAT,CAAkBC,KAAlB,CAAqC,CAC1C,GAAQC,CAAAA,KAAR,CAA2BD,KAA3B,CAAQC,KAAR,CAAkBC,IAAlB,uCAA2BF,KAA3B,YACA,cAAsB,oBAAS,IAAT,CAAtB,qDAAOG,GAAP,eAAYC,MAAZ,eACA,qBAAU,UAAM,CACdR,oBAAoB,CAACK,KAAD,CAApB,CAA4BI,IAA5B,CAAiCD,MAAjC,EACD,CAFD,CAEG,CAACH,KAAD,CAFH,EAGA,MAAO,8BAAC,WAAD,wBAAQ,GAAG,CAAEE,GAAb,EAAsBD,IAAtB,mEAAP,CACD,C,GAEYI,CAAAA,Y,0aACH,CAAEH,GAAG,CAAE,IAAP,C,uFACR,4BAAoB,CAClB,KAAKI,IAAL,CAAU,KAAKP,KAAL,CAAWC,KAArB,EACD,C,kCACD,4BAAmBO,SAAnB,CAA2D,CACzD,GAAQP,CAAAA,KAAR,CAAkB,KAAKD,KAAvB,CAAQC,KAAR,CACA,GAAIA,KAAK,GAAKO,SAAS,CAACP,KAAxB,CAA+B,CAC7B,KAAKM,IAAL,CAAUN,KAAV,EACD,CACF,C,oBACD,cAAWA,KAAX,kJAEI,IAFJ,KAEyBA,KAFzB,6EAEuCL,oBAAoB,CAACK,KAAD,CAF3D,gFAEqE,IAFrE,gDAEoBE,GAFpB,4BAESM,QAFT,sHAIIhB,OAAO,CAACC,KAAR,eAJJ,2E,sBAOA,iBAAS,CACP,GACEM,CAAAA,KADF,CAGI,IAHJ,CACEA,KADF,CAEWG,GAFX,CAGI,IAHJ,CAEEO,KAFF,CAEWP,GAFX,CAIA,MAAO,8BAAC,eAAD,EAAY,GAAG,CAAEA,GAAjB,CAAsB,QAAQ,CAAEH,KAAhC,iEAAP,CACD,C,0BAxB+BW,gB,iDA2BnBZ,Q","sourcesContent":["import React, { useState, useEffect, Component } from 'react';\nimport { NativeModules, Platform } from 'react-native';\n// @ts-ignore\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\n\nimport { fetchText } from './xml';\nimport { SvgCss, SvgWithCss } from './css';\n\nconst { getRawResource } = NativeModules.RNSVGRenderableManager || {};\n\nexport function getUriFromSource(source?: string | number) {\n  const resolvedAssetSource = resolveAssetSource(source);\n  return resolvedAssetSource.uri;\n}\n\nexport function loadLocalRawResourceDefault(source?: string | number) {\n  const uri = getUriFromSource(source);\n  return fetchText(uri);\n}\n\nexport function isUriAnAndroidResourceIdentifier(uri?: string | number) {\n  return typeof uri === 'string' && uri.indexOf('/') <= -1;\n}\n\nexport async function loadAndroidRawResource(uri?: string | number) {\n  try {\n    return await getRawResource(uri);\n  } catch (e) {\n    console.error(\n      'Error in RawResourceUtils while trying to natively load an Android raw resource: ',\n      e,\n    );\n    return null;\n  }\n}\n\nexport function loadLocalRawResourceAndroid(source?: string | number) {\n  const uri = getUriFromSource(source);\n  if (isUriAnAndroidResourceIdentifier(uri)) {\n    return loadAndroidRawResource(uri);\n  } else {\n    return fetchText(uri);\n  }\n}\n\nexport const loadLocalRawResource =\n  Platform.OS !== 'android'\n    ? loadLocalRawResourceDefault\n    : loadLocalRawResourceAndroid;\n\nexport type LocalProps = { asset?: string | number; override?: Object };\nexport type LocalState = { xml: string | null };\n\nexport function LocalSvg(props: LocalProps) {\n  const { asset, ...rest } = props;\n  const [xml, setXml] = useState(null);\n  useEffect(() => {\n    loadLocalRawResource(asset).then(setXml);\n  }, [asset]);\n  return <SvgCss xml={xml} {...rest} />;\n}\n\nexport class WithLocalSvg extends Component<LocalProps, LocalState> {\n  state = { xml: null };\n  componentDidMount() {\n    this.load(this.props.asset);\n  }\n  componentDidUpdate(prevProps: { asset?: string | number }) {\n    const { asset } = this.props;\n    if (asset !== prevProps.asset) {\n      this.load(asset);\n    }\n  }\n  async load(asset?: string | number) {\n    try {\n      this.setState({ xml: asset ? await loadLocalRawResource(asset) : null });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  render() {\n    const {\n      props,\n      state: { xml },\n    } = this;\n    return <SvgWithCss xml={xml} override={props} />;\n  }\n}\n\nexport default LocalSvg;\n"]}