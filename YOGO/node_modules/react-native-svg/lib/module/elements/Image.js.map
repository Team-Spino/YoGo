{"version":3,"sources":["Image.tsx"],"names":["spacesRegExp","SvgImage","props","preserveAspectRatio","x","y","width","height","xlinkHref","href","modes","trim","split","align","meetOrSlice","imageProps","meetOrSliceTypes","alignEnum","src","Image","resolveAssetSource","uri","refMethod","Shape"],"mappings":"2yBAAA,oDACA,yCACA,6DACA,yDAEA,uDACA,oD,+yBAEA,GAAMA,CAAAA,YAAY,CAAG,KAArB,C,GAEqBC,CAAAA,Q,yPAmBnB,iBAAS,CACP,GAAQC,CAAAA,KAAR,CAAkB,IAAlB,CAAQA,KAAR,CACA,GACEC,CAAAA,mBADF,CAQID,KARJ,CACEC,mBADF,CAEEC,CAFF,CAQIF,KARJ,CAEEE,CAFF,CAGEC,CAHF,CAQIH,KARJ,CAGEG,CAHF,CAIEC,KAJF,CAQIJ,KARJ,CAIEI,KAJF,CAKEC,MALF,CAQIL,KARJ,CAKEK,MALF,CAMEC,SANF,CAQIN,KARJ,CAMEM,SANF,aAQIN,KARJ,CAOEO,IAPF,CAOEA,IAPF,sBAOSD,SAPT,aASA,GAAME,CAAAA,KAAK,CAAGP,mBAAmB,CAC7BA,mBAAmB,CAACQ,IAApB,GAA2BC,KAA3B,CAAiCZ,YAAjC,CAD6B,CAE7B,EAFJ,CAGA,GAAMa,CAAAA,KAAK,CAAGH,KAAK,CAAC,CAAD,CAAnB,CACA,GAAMI,CAAAA,WAA2D,CAC/DJ,KAAK,CAAC,CAAD,CADP,CAEA,GAAMK,CAAAA,UAAU,CAAG,CACjBX,CAAC,CAADA,CADiB,CAEjBC,CAAC,CAADA,CAFiB,CAGjBC,KAAK,CAALA,KAHiB,CAIjBC,MAAM,CAANA,MAJiB,CAKjBO,WAAW,CAAEE,iCAAiBF,WAAjB,GAAiC,CAL7B,CAMjBD,KAAK,CAAEI,0BAAUJ,KAAV,GAAoB,UANV,CAOjBK,GAAG,CAAE,CAACT,IAAD,CACD,IADC,CAEDU,mBAAMC,kBAAN,CACE,MAAOX,CAAAA,IAAP,GAAgB,QAAhB,CAA2B,CAAEY,GAAG,CAAEZ,IAAP,CAA3B,CAA2CA,IAD7C,CATa,CAAnB,CAaA,MACE,8BAAC,4BAAD,wBACE,GAAG,CAAE,KAAKa,SADZ,EAEM,4BAAU,IAAV,CAAgBpB,KAAhB,CAFN,CAGMa,UAHN,kEADF,CAOD,C,sBAxDmCQ,e,wDAAjBtB,Q,eASE,O,+BATFA,Q,gBAWG,CACpBG,CAAC,CAAE,CADiB,CAEpBC,CAAC,CAAE,CAFiB,CAGpBC,KAAK,CAAE,CAHa,CAIpBC,MAAM,CAAE,CAJY,CAKpBJ,mBAAmB,CAAE,eALD,C","sourcesContent":["import React from 'react';\nimport { Image, ImageSourcePropType } from 'react-native';\nimport { alignEnum, meetOrSliceTypes } from '../lib/extract/extractViewBox';\nimport { withoutXY } from '../lib/extract/extractProps';\nimport { NumberProp } from '../lib/extract/types';\nimport Shape from './Shape';\nimport { RNSVGImage } from './NativeComponents';\n\nconst spacesRegExp = /\\s+/;\n\nexport default class SvgImage extends Shape<{\n  preserveAspectRatio?: string;\n  x?: NumberProp;\n  y?: NumberProp;\n  width?: NumberProp;\n  height?: NumberProp;\n  xlinkHref?: string | number | ImageSourcePropType;\n  href?: string | number | ImageSourcePropType;\n}> {\n  static displayName = 'Image';\n\n  static defaultProps = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n    preserveAspectRatio: 'xMidYMid meet',\n  };\n\n  render() {\n    const { props } = this;\n    const {\n      preserveAspectRatio,\n      x,\n      y,\n      width,\n      height,\n      xlinkHref,\n      href = xlinkHref,\n    } = props;\n    const modes = preserveAspectRatio\n      ? preserveAspectRatio.trim().split(spacesRegExp)\n      : [];\n    const align = modes[0];\n    const meetOrSlice: 'meet' | 'slice' | 'none' | string | undefined =\n      modes[1];\n    const imageProps = {\n      x,\n      y,\n      width,\n      height,\n      meetOrSlice: meetOrSliceTypes[meetOrSlice] || 0,\n      align: alignEnum[align] || 'xMidYMid',\n      src: !href\n        ? null\n        : Image.resolveAssetSource(\n            typeof href === 'string' ? { uri: href } : href,\n          ),\n    };\n    return (\n      <RNSVGImage\n        ref={this.refMethod}\n        {...withoutXY(this, props)}\n        {...imageProps}\n      />\n    );\n  }\n}\n"]}